.. java:import:: org.uma.jmetal.algorithm Algorithm

.. java:import:: org.uma.jmetal.util.naming DescribedEntity

.. java:import:: java.util Collection

SolutionBuilder
===============

.. java:package:: org.uma.jmetal.solution
   :noindex:

.. java:type:: public interface SolutionBuilder<Solution>

   A \ :java:ref:`SolutionBuilder`\  allows to generate a \ :java:ref:`Solution`\  by setting its fundamental information, in other words by providing the values of its \ :java:ref:`Variable`\ s.

   :author: Matthieu Vergne
   :param <Solution>:

Methods
-------
build
^^^^^

.. java:method:: public Solution build()
   :outertype: SolutionBuilder

   This method generates a valid \ :java:ref:`Solution`\  based on all the \ :java:ref:`Value`\ s prepared by calling \ :java:ref:`prepare(Variable,Object)`\ . Usually, all the \ :java:ref:`Variable`\ s should have been prepared before to be able to build a valid \ :java:ref:`Solution`\ , but it depends on the definition of the \ :java:ref:`Solution`\  (e.g. there could have \ :java:ref:`Variable`\ s depending on each other, such that preparing one is equivalent to prepare others). Specific implementation could provide a method to know whether or not \ :java:ref:`build()`\  can be called, or other facilities to ensure that a \ :java:ref:`Solution`\  is properly prepared when \ :java:ref:`build()`\  is called.

   :return: a new \ :java:ref:`Solution`\  instance

getVariables
^^^^^^^^^^^^

.. java:method:: public Collection<Variable<Solution, ?>> getVariables()
   :outertype: SolutionBuilder

   :return: the list of \ :java:ref:`Variable`\ s managed by this \ :java:ref:`SolutionBuilder`\

prepare
^^^^^^^

.. java:method:: public <Value> void prepare(Variable<Solution, Value> variable, Value value)
   :outertype: SolutionBuilder

   This method tells which \ :java:ref:`Value`\  to assign to the next \ :java:ref:`Solution`\ , generated by \ :java:ref:`build()`\ , for a given \ :java:ref:`Variable`\ . Once all the required \ :java:ref:`Variable`\ s are prepared, \ :java:ref:`build()`\  can be called to generate the \ :java:ref:`Solution`\ . If this method is called several time on the same \ :java:ref:`Variable`\  before to call \ :java:ref:`build()`\ , the last prepared \ :java:ref:`Value`\  should be considered.

   :param variable: the \ :java:ref:`Variable`\  to consider
   :param value: the \ :java:ref:`Value`\  to prepare for this \ :java:ref:`Variable`\

