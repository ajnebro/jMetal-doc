.. java:import:: org.uma.jmetal.algorithm.multiobjective.espea.util ScalarizationWrapper.ScalarizationType

.. java:import:: org.uma.jmetal.solution Solution

.. java:import:: org.uma.jmetal.util SolutionListUtils

.. java:import:: org.uma.jmetal.util.archive.impl AbstractBoundedArchive

.. java:import:: org.uma.jmetal.util.comparator FitnessComparator

.. java:import:: org.uma.jmetal.util.front.util FrontNormalizer

.. java:import:: org.uma.jmetal.util.solutionattribute.impl Fitness

.. java:import:: java.util Collections

.. java:import:: java.util Comparator

EnergyArchive
=============

.. java:package:: org.uma.jmetal.algorithm.multiobjective.espea.util
   :noindex:

.. java:type:: @SuppressWarnings public class EnergyArchive<S extends Solution<?>> extends AbstractBoundedArchive<S>

   The archive that is used within the \ :java:ref:`ESPEA`\  algorithm. The archive is of variable size and bounded by the population size. A new solution can only replace an existing archive member if it leads to a reduction of the total energy of the archive.

   :author: marlon.braun

Constructors
------------
EnergyArchive
^^^^^^^^^^^^^

.. java:constructor:: public EnergyArchive(int maxSize)
   :outertype: EnergyArchive

   Standard constructor that uses uniform preferences - all Pareto optimal solutions are equally desirable.

   :param maxSize: Size of the final distribution of points generated by the archive.

EnergyArchive
^^^^^^^^^^^^^

.. java:constructor:: public EnergyArchive(int maxSize, ScalarizationWrapper scalWrapper)
   :outertype: EnergyArchive

   Constructor that requires archive size and scalarization method

   :param maxSize: Size of the final distribution of points generated by the archive.
   :param scalWrapper: The scalarization method that is used for computing energy contributions.

EnergyArchive
^^^^^^^^^^^^^

.. java:constructor:: public EnergyArchive(int maxSize, ScalarizationWrapper scalWrapper, boolean normalizeObjectives)
   :outertype: EnergyArchive

   Constructor that requires archive size, scalarization method and whether objectives are normliazed.

   :param maxSize: Size of the final distribution of points generated by the archive.
   :param scalWrapper: The scalarization method that is used for computing energy contributions.
   :param normalizeObjectives: Whether or not objective values are normlalized between distance computation.

EnergyArchive
^^^^^^^^^^^^^

.. java:constructor:: public EnergyArchive(int maxSize, ScalarizationWrapper scalWrapper, boolean normalizeObjectives, ReplacementStrategy replacementStrategy)
   :outertype: EnergyArchive

   Constructor that requires archive size, scalarization method, whether objectives are normalized and the replacement strategy.

   :param maxSize: Size of the final distribution of points generated by the archive.
   :param scalWrapper: The scalarization method that is used for computing energy contributions.
   :param normalizeObjectives: Whether or not objective values are normlalized between distance computation.
   :param replacementStrategy: Replacement strategy for archive update.

Methods
-------
computeDensityEstimator
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: @Override public void computeDensityEstimator()
   :outertype: EnergyArchive

getComparator
^^^^^^^^^^^^^

.. java:method:: @Override public Comparator<S> getComparator()
   :outertype: EnergyArchive

isFull
^^^^^^

.. java:method:: public boolean isFull()
   :outertype: EnergyArchive

   A check for testing whether the archive is full.

   :return: true if the archive possesses the maximum number of elements. False otherwise.

prune
^^^^^

.. java:method:: @Override public void prune()
   :outertype: EnergyArchive

sortByDensityEstimator
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: @Override public void sortByDensityEstimator()
   :outertype: EnergyArchive

